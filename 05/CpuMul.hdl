/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/


CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
        //calc Reg A
     Not(in=instruction[15], out=load2);
     And(a=instruction[5], b=instruction[15], out=load1);
     Or(a=load1, b=load2, out=loadA);
     Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=RegAinput);
     ARegister(in=RegAinput, load=loadA, out=outRegA, out[0..14]= addressM);
     
        //calc Reg D
     And(a=instruction[15], b=instruction[4], out=loadD);
     DRegister(in=ALUoutput, load=loadD, out=outRegD);
     
        //calc the ALU (extend)
     Mux16(a=outRegA, b=inM, sel=instruction[12], out=toALU);
     ExtendAlu(x=outRegD, y=toALU, instruction=instruction[6..14], out=outM, out=ALUoutput, zr=zr, ng=ng);
     
        //calc the PC
     
     PC(in=outRegA , load=, inc=, reset=reset, out[0..14]=pc);
     
}
